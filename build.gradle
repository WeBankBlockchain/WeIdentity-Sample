def gradleVer = "4"
if (gradle.gradleVersion.startsWith("6")
        || gradle.gradleVersion.startsWith("5")
        || gradle.gradleVersion.startsWith("4.10")
        || gradle.gradleVersion.startsWith("4.9")
        || gradle.gradleVersion.startsWith("4.8")
        || gradle.gradleVersion.startsWith("4.7")) {
    println "Gradle with version >= 4.7 detected"
    gradleVer = "5"
} else {
    println "Gradle with version < 4.7 detected"
}

buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        //使用1.5.4.RELEASE版本的Spring框架
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.12.RELEASE")
        classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.6.5"
    }
}

apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
if (!gradle.startParameter.isOffline()) {
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'
    apply plugin: "com.github.spotbugs"
    apply plugin: 'signing'
}

version = "1.0.3"
//设置jdk的版本
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    if (!gradle.startParameter.isOffline()) {
        mavenLocal()
        mavenCentral()//依赖Maven仓库
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        maven { url "https://dl.bintray.com/ethereum/maven/" }
        maven { url "https://oss.sonatype.org/content/groups/public/" }
    } else {
        maven {
            url 'dependencies'
        }
    }
}

def spring_version = "4.3.27.RELEASE"
def log4j_version = "2.13.3";
def slf4j_version = "1.7.30";
def jackson_version = "2.11.0";
def mysql_version = "8.0.20";
def swagger_version = "2.9.2";

List swagger = [
        "io.springfox:springfox-swagger2:$swagger_version",
        "io.springfox:springfox-swagger-ui:$swagger_version"
]

List apache_commons = [
        "org.apache.logging.log4j:log4j-api:$log4j_version",
        "org.apache.logging.log4j:log4j-web:$log4j_version",
        "org.apache.logging.log4j:log4j-core:$log4j_version",
        "org.apache.logging.log4j:log4j-jcl:$log4j_version",
        "org.apache.logging.log4j:log4j-slf4j-impl:$log4j_version",
        "org.slf4j:jul-to-slf4j:$slf4j_version",
        "org.slf4j:slf4j-api:$slf4j_version"
]

List json = [
        "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jackson_version",
        "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version",
        "com.fasterxml.jackson.module:jackson-module-parameter-names:$jackson_version",
        "com.fasterxml.jackson.core:jackson-databind:$jackson_version",
        "com.fasterxml.jackson.core:jackson-annotations:$jackson_version",
        "com.fasterxml.jackson.core:jackson-core:$jackson_version",
        "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jackson_version"
]

List mysql_driver = [
        "mysql:mysql-connector-java:$mysql_version"
]

List spring = [
        "org.springframework:spring-core:$spring_version",
        "org.springframework:spring-beans:$spring_version",
        "org.springframework:spring-context:$spring_version",
        "org.springframework:spring-tx:$spring_version",
        "org.springframework:spring-jdbc:$spring_version",
        "org.springframework:spring-test:$spring_version",
        "org.springframework:spring-context-support:$spring_version",
        "org.springframework:spring-web:$spring_version",
        "org.springframework:spring-webmvc:$spring_version"
]

List other = [
        "javassist:javassist:3.12.1.GA"
]

configurations {
    localDeps
}

//添加编译时的依赖
dependencies {
    localDeps 'org.projectlombok:lombok:1.18.12'
    // Check SDK pipeline dependency
    if (file("./dependencies/weid-java-sdk-pipeline.jar").exists()) {
        println "Pipeline jar for WeIdentity Java SDK found."
        compile files('./dependencies/weid-java-sdk-pipeline.jar')
    } else {
        println "No pipeline jar found for WeIdentity Java SDK, using gradle version.."
        compile("com.webank:weid-java-sdk:1.6.5-rc.4-SNAPSHOT") {
            exclude group:"org.slf4j", module: "slf4j-log4j12"
        }
    }
    if (gradleVer.startsWith("4")) {
        if (gradle.startParameter.isOffline()) {
            compile fileTree(dir: 'dist/lib', include: '*.jar')
        } else {
            compile("org.springframework.boot:spring-boot-starter-web"){
                exclude group:"ch.qos.logback"
            }
            compile fileTree(dir:'libs', include:'*.jar')
            compile apache_commons, swagger, json, mysql_driver, spring, other
        }
    }
    if (gradleVer.startsWith("5")) {
        if (!gradle.startParameter.isOffline()) {
            compileOnly 'org.projectlombok:lombok:1.18.12'
            annotationProcessor 'org.projectlombok:lombok:1.18.12'
            compile("org.springframework.boot:spring-boot-starter-web"){
                exclude group:"ch.qos.logback"
            }
            compile fileTree(dir:'libs', include:'*.jar')
            compile apache_commons, swagger, json, mysql_driver, spring, other
        } else {
            compileOnly files('dist/lib/lombok-1.18.12.jar')
            annotationProcessor files('dist/lib/lombok-1.18.12.jar')
            compile fileTree(dir: 'dist/lib', include: '*.jar')
        }
    }
}

//生成的jar包包名和版本
jar {
    destinationDir file('dist/app')
    archiveName project.name + '.jar'

    doFirst {
        exclude '/*.*'
    }

    doLast {
        copy {
            from file('src/main/resources/')
            into 'dist/conf'
        }
        copy {
            from file('keys')
            into 'dist/keys'
        }
        copy {
            from configurations.compile
            into 'dist/lib'
        }
        copy {
            from file('.').listFiles().findAll { File f -> (f.name.endsWith('.bat') || f.name.endsWith('.sh') || f.name.endsWith('.env')) }
            into 'dist'
        }
        mkdir 'dist/logs'
    }
}

mainClassName = 'com.webank.weid.demo.server.SampleApp'

build {
    doLast {
        delete "dist/app/" + project.name + ".jar"
        file("dist/app/" + project.name + ".jar.original").renameTo("dist/app/" + project.name + ".jar")
        print project.name
    }
}

clean {
    delete("dist")
}

eclipse {
    classpath {
        downloadSources = false
    }
}

checkstyle {
    ignoreFailures false
    showViolations true
    toolVersion '8.12'
    configProperties.projectDir = project.projectDir
    checkstyleMain.configFile = new File(project.projectDir, '/config/checkstyle/webank_google_checks.xml')
}

tasks.withType(Checkstyle) {
    include '**/*.java'
    reports {
        xml.enabled false
        html.enabled true
    }
}

spotbugs {
    ignoreFailures = true
    showProgress = true
    toolVersion = "3.1.8"
    effort = "max"
    reportLevel = "low"
    excludeFilter = file("${project.rootDir}/config/spotbugs/spotbugs_filter.xml")
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet resources.text.fromFile('config/spotbugs.xsl')
    }
}
