def gradleVer = "4"
if (gradle.gradleVersion.startsWith("6")
        || gradle.gradleVersion.startsWith("5")
        || gradle.gradleVersion.startsWith("4.10")
        || gradle.gradleVersion.startsWith("4.9")
        || gradle.gradleVersion.startsWith("4.8")
        || gradle.gradleVersion.startsWith("4.7")) {
    println "Gradle with version >= 4.7 detected"
    gradleVer = "5"
} else {
    println "Gradle with version < 4.7 detected"
}

buildscript {
	repositories {
	    maven { url "https://plugins.gradle.org/m2/" }
	}
    dependencies {
        //使用1.5.4.RELEASE版本的Spring框架
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.4.RELEASE")
        classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.6.5"
    }
}

apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
if (!gradle.startParameter.isOffline()) {
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'
    apply plugin: "com.github.spotbugs"
    apply plugin: 'signing'
}

version = "1.0.2"
//设置jdk的版本
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	if (!gradle.startParameter.isOffline()) {
        mavenLocal()
   	 	mavenCentral()//依赖Maven仓库
    	maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    	maven { url "https://dl.bintray.com/ethereum/maven/" }
    } else {
        maven {
            url 'dependencies'
        }
    }
}

List apache_commons = [
        "org.apache.commons:commons-collections4:4.1",
        "org.apache.commons:commons-lang3:3.5",
        "commons-cli:commons-cli:1.3.1",
        'com.github.fge:json-schema-validator:2.2.6',
        "com.fasterxml.jackson.core:jackson-databind:2.10.0",
        "com.fasterxml.jackson.core:jackson-core:2.10.0",
        "com.fasterxml.jackson.core:jackson-annotations:2.10.0",
        "com.github.reinert:jjschema:1.16",
        "com.google.zxing:core:3.3.0"
]

configurations {
    localDeps
}

//添加编译时的依赖
dependencies {
    localDeps 'org.projectlombok:lombok:1.18.10'
    // Check SDK pipeline dependency
    if (file("./dependencies/weid-java-sdk-pipeline.jar").exists()) {
        println "Pipeline jar for WeIdentity Java SDK found."
        compile files('./dependencies/weid-java-sdk-pipeline.jar')
    } else {
        println "No pipeline jar found for WeIdentity Java SDK, using gradle version.."
        compile("com.webank:weid-java-sdk:1.4.0") {
            exclude group:"org.slf4j", module: "slf4j-log4j12"
        }
    }
    if (gradleVer.startsWith("4")) {
        if (gradle.startParameter.isOffline()) {
            compile fileTree(dir: 'dist/lib', include: '*.jar')
        } else {
            compile("org.springframework.boot:spring-boot-starter-web"){
				exclude group:"ch.qos.logback"
			}
            compile fileTree(dir:'libs', include:'*.jar')
			compile apache_commons
        }
    }
 	if (gradleVer.startsWith("5")) {
        if (!gradle.startParameter.isOffline()) {
            compileOnly 'org.projectlombok:lombok:1.18.10'
            annotationProcessor 'org.projectlombok:lombok:1.18.10'
            compile("org.springframework.boot:spring-boot-starter-web"){
				exclude group:"ch.qos.logback"
			}
            compile fileTree(dir:'libs', include:'*.jar')
			compile apache_commons
        } else {
            compileOnly files('dist/lib/lombok-1.18.10.jar')
            annotationProcessor files('dist/lib/lombok-1.18.10.jar')
            compile fileTree(dir: 'dist/lib', include: '*.jar')
        }
    }
}

//生成的jar包包名和版本
jar {
    destinationDir file('dist/app')
    archiveName project.name + '.jar'
    
    doFirst {
   		exclude '/*.*'
    }
    
    doLast {
        copy {
            from file('src/main/resources/')
            into 'dist/conf'
        }
        copy {
            from configurations.compile
            into 'dist/lib'
        }
        mkdir 'dist/logs'
    }
}

mainClassName = 'com.webank.weid.demo.server.SampleApp'

build {
    doLast {
        delete "dist/app/" + project.name + ".jar"
        file("dist/app/" + project.name + ".jar.original").renameTo("dist/app/" + project.name + ".jar")
        print project.name
    }
}

clean {
    delete("dist")
}

checkstyle {
    ignoreFailures false
    showViolations true
    toolVersion '8.12'
    configProperties.projectDir = project.projectDir
    checkstyleMain.configFile = new File(project.projectDir, '/config/checkstyle/webank_google_checks.xml')
}

tasks.withType(Checkstyle) {
    include '**/*.java'
    reports {
        xml.enabled false
        html.enabled true
    }
}

spotbugs {
    ignoreFailures = true
    showProgress = true
    toolVersion = "3.1.8"
    effort = "max"
    reportLevel = "low"
    excludeFilter = file("${project.rootDir}/config/spotbugs/spotbugs_filter.xml")
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet resources.text.fromFile('config/spotbugs.xsl')
    }
}
